{% set name = "spectral-cube" %}
{% set version = "0.6.6" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/{{ name[0] }}/{{ name }}/{{ name | replace('-', '_') }}-{{ version }}.tar.gz
  sha256: 6e306086be56adf0b8347e5cca2cbd4548829894941c1b720fad5b7758bfe243

build:
  number: 0
  skip: true  # [py<310]
  script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation --ignore-installed -vv

requirements:
  host:
    - pip
    - python
    - setuptools
    - setuptools_scm
    - wheel
  run:
    - python
    - astropy
    - numpy >=1.8.0
    - radio-beam >=0.3.3
    - dask
    - joblib
    - casa_formats_io
    - packaging
    - tqdm
  run_constrained:
    - zarr <3.0.0
    - reproject >=0.9.1

# KeyError: '>f8'
{% set tests_to_skip = "test_save_to_tmp_dir" %}
# AssertionError: Aassert np.float64(305.2461585938677) == 305.2461585938794
{% set tests_to_skip = tests_to_skip + " or test_cube_wcs_freqtovel" %}
# AssertionError: assert '' == 'Update Funct...nction Call\n'
{% set tests_to_skip = tests_to_skip + " or test_smooth_update_function_parallel" %}
# TypeError: 'numpy.bool' object cannot be interpreted as an integer
{% set tests_to_skip = tests_to_skip + " or test_minimal_subcube[False]" %}
# Failed: 2 thread(s) were leaked
{% set tests_to_skip = tests_to_skip + " or test_dask_distributed" %}

test:
  imports:
    - spectral_cube
  requires:
    - pip
    - pytest
    - pytest-astropy
    - numpy >=1.24.0
    - astropy >=5.2.1
    - zarr <3.0.0
  commands:
    - pip check
    - pytest --pyargs spectral_cube.tests -k "not ({{ tests_to_skip }})"

about:
  home: https://spectral-cube.readthedocs.io
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.rst
  summary: A package for interaction with spectral cubes
  description: |
    The spectral-cube package provides an easy way to read, manipulate,
    analyze, and write data cubes with two positional dimensions and one
    spectral dimension, optionally with Stokes parameters. It provides  a
    uniform interface to spectral cubes, robust to the wide range of
    conventions of axis order, spatial projections, and spectral units that
    exist in the wild. It also allows easy extraction of cube sub-regions
    using physical coordinates and the ability to easily create, combine, and
    apply masks to datasets. It is designed to work with datasets too large to
    load into memory.
  doc_url: https://spectral-cube.readthedocs.io
  dev_url: https://github.com/radio-astro-tools/spectral-cube

extra:
  recipe-maintainers:
    - mwcraig
    - bsipocz
    - keflavich
    - astrofrog
